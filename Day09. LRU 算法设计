Day09. LRU 算法设计
https://labuladong.github.io/algo/2/21/57/

牛客网	LeetCode	力扣	难度
LRU 缓存	146. LRU Cache	146. LRU 缓存

```go
type LRUCache struct {
    Capacity int
    Size int
    Cache map[int]*DLinkedNode
    Head *DLinkedNode
    Tail *DLinkedNode
}


func Constructor(capacity int) LRUCache {
    l := LRUCache{
        Capacity: capacity,
        Size: 0,
        Cache: map[int]*DLinkedNode{},
        Head: InitDLinkedNode(0, 0),
        Tail: InitDLinkedNode(0, 0),
    }
    l.Head.Next = l.Tail
    l.Tail.Pre = l.Head
    return l
}


func (this *LRUCache) Get(key int) int {
    node, ok := this.Cache[key]
    if !ok {
        return -1
    }
    this.MoveToHead(node)
    return node.Value
}


// func (this *LRUCache) Put(key int, value int)  {
//     node, ok := this.Cache[key]
//     if !ok {
//         node = InitDLinkedNode(key, value)
//         if this.Size < this.Capacity {
//             this.AddToHead(node)
//             this.Size++
//         } else {
//             this.RemoveTail()
//             this.AddToHead(node)
//         }
//     } else {
//         node.Value = value
//         this.MoveToHead(node)
//     }
// }

func (this *LRUCache) Put(key int, value int)  {
    if _, ok := this.Cache[key]; !ok {
        node := InitDLinkedNode(key, value)
        this.Cache[key] = node
        this.AddToHead(node)
        this.Size++
        if this.Size > this.Capacity {
            removed := this.RemoveTail()
            delete(this.Cache, removed.Key)
            this.Size--
        }
    } else {
        node := this.Cache[key]
        node.Value = value
        this.MoveToHead(node)
    }
}


type DLinkedNode struct {
    Key int
    Value int
    Pre *DLinkedNode
    Next *DLinkedNode
}

func InitDLinkedNode(key, value int) *DLinkedNode {
    return &DLinkedNode{
        Key: key,
        Value: value,
    }
}

func (this *LRUCache) AddToHead(node *DLinkedNode)  {
    node.Pre = this.Head
    node.Next = this.Head.Next
    node.Next.Pre = node
    this.Head.Next = node
}
func (this *LRUCache) RemoveNode(node *DLinkedNode)  {
    node.Next.Pre = node.Pre
    node.Pre.Next = node.Next
}
func (this *LRUCache) MoveToHead(node *DLinkedNode)  {
    this.RemoveNode(node)
    this.AddToHead(node)
}

func (this *LRUCache) RemoveTail() *DLinkedNode {
    // this.Tail.Pre = this.Tail.Pre.Pre
    // this.Tail.Pre.Next = this.Tail
    node := this.Tail.Pre
    this.RemoveNode(node)
    return node
}




/**
 * Your LRUCache object will be instantiated and called as such:
 * obj := Constructor(capacity);
 * param_1 := obj.Get(key);
 * obj.Put(key,value);
 */
```
